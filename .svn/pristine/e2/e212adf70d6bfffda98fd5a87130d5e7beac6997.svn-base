package com.check.action.entrust;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.processors.JsonValueProcessor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import com.opensymphony.xwork2.Action;
import com.check.service.entrust.IEntrustService;
import com.check.utils.MatrixToImageWriter;
import com.check.model.entrust.Entrust;
import com.check.model.pact.Pact;
public class EntrustAction implements Action {
	private int page;
	private int size;
	private int totalpage;
	private int totalnumber;
	private String message;
	private String callback;//跨域
	@Autowired
	private IEntrustService iEntrustService;
	private List<Entrust> list;
	private Entrust entrust;
	public int getPage() {
		return page;
	}
	public void setPage(int page) {
		this.page = page;
	}
	public int getSize() {
		return size;
	}
	public void setSize(int size) {
		this.size = size;
	}
	public int getTotalpage() {
		return totalpage;
	}
	public void setTotalpage(int totalpage) {
		this.totalpage = totalpage;
	}
	public int getTotalnumber() {
		return totalnumber;
	}
	public void setTotalnumber(int totalnumber) {
		this.totalnumber = totalnumber;
	}
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	public Entrust getEntrust() {
		return entrust;
	}
	public void setEntrust(Entrust entrust) {
		this.entrust = entrust;
	}
	public List<Entrust> getList() {
		return list;
	}
	public void setList(List<Entrust> list) {
		this.list = list;
	}
	public String getCallback() {
		return callback;
	}
	public void setCallback(String callback) {
		this.callback = callback;
	}
	HttpServletResponse response = ServletActionContext.getResponse(); 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	Logger logger = Logger.getLogger("CheckLogger");
	private String id;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	private String row_id;
	public String getRow_id() {
		return row_id;
	}
	public void setRow_id(String row_id) {
		this.row_id = row_id;
	}
	private String c_dtFrom;
	public String getC_dtFrom() {
		return c_dtFrom;
	}
	public void setC_dtFrom(String c_dtFrom) {
		this.c_dtFrom = c_dtFrom;
	}
	private String c_dtTo;
	public String getC_dtTo() {
		return c_dtTo;
	}
	public void setC_dtTo(String c_dtTo) {
		this.c_dtTo = c_dtTo;
	}
	private String c_dt;
	public String getC_dt() {
		return c_dt;
	}
	public void setC_dt(String c_dt) {
		this.c_dt = c_dt;
	}
	private String up_dtFrom;
	public String getUp_dtFrom() {
		return up_dtFrom;
	}
	public void setUp_dtFrom(String up_dtFrom) {
		this.up_dtFrom = up_dtFrom;
	}
	private String up_dtTo;
	public String getUp_dtTo() {
		return up_dtTo;
	}
	public void setUp_dtTo(String up_dtTo) {
		this.up_dtTo = up_dtTo;
	}
	private String up_dt;
	public String getUp_dt() {
		return up_dt;
	}
	public void setUp_dt(String up_dt) {
		this.up_dt = up_dt;
	}
	private String c_id;
	public String getC_id() {
		return c_id;
	}
	public void setC_id(String c_id) {
		this.c_id = c_id;
	}
	private String code;
	public String getCode() {
		return code;
	}
	public void setCode(String code) {
		this.code = code;
	}
	private String prod_id;
	public String getProd_id() {
		return prod_id;
	}
	public void setProd_id(String prod_id) {
		this.prod_id = prod_id;
	}
	private String ty_lv;
	public String getTy_lv() {
		return ty_lv;
	}
	public void setTy_lv(String ty_lv) {
		this.ty_lv = ty_lv;
	}
	private String qy_lv;
	public String getQy_lv() {
		return qy_lv;
	}
	public void setQy_lv(String qy_lv) {
		this.qy_lv = qy_lv;
	}
	private String jl_id;
	public String getJl_id() {
		return jl_id;
	}
	public void setJl_id(String jl_id) {
		this.jl_id = jl_id;
	}
	private String sp_id;
	public String getSp_id() {
		return sp_id;
	}
	public void setSp_id(String sp_id) {
		this.sp_id = sp_id;
	}
	private String lq_id;
	public String getLq_id() {
		return lq_id;
	}
	public void setLq_id(String lq_id) {
		this.lq_id = lq_id;
	}
	private String st_lv;
	public String getSt_lv() {
		return st_lv;
	}
	public void setSt_lv(String st_lv) {
		this.st_lv = st_lv;
	}
	private String pay_lv;
	public String getPay_lv() {
		return pay_lv;
	}
	public void setPay_lv(String pay_lv) {
		this.pay_lv = pay_lv;
	}
	private String price;
	public String getPrice() {
		return price;
	}
	public void setPrice(String price) {
		this.price = price;
	}
	private String cs_n;
	public String getCs_n() {
		return cs_n;
	}
	public void setCs_n(String cs_n) {
		this.cs_n = cs_n;
	}
	private String syr_id;
	public String getSyr_id() {
		return syr_id;
	}
	public void setSyr_id(String syr_id) {
		this.syr_id = syr_id;
	}
	private String jh_dt;
	public String getJh_dt() {
		return jh_dt;
	}
	public void setJh_dt(String jh_dt) {
		this.jh_dt = jh_dt;
	}
	private String cg_f;
	public String getCg_f() {
		return cg_f;
	}
	public void setCg_f(String cg_f) {
		this.cg_f = cg_f;
	}
	private String cm_tx;
	public String getCm_tx() {
		return cm_tx;
	}
	public void setCm_tx(String cm_tx) {
		this.cm_tx = cm_tx;
	}
	private String flg;
	public String getFlg() {
		return flg;
	}
	public void setFlg(String flg) {
		this.flg = flg;
	}
	private String pid;
	public String getPid() {
		return pid;
	}
	public void setPid(String pid) {
		this.pid = pid;
	}
	private String ls_n;
	public String getLs_n() {
		return ls_n;
	}
	public void setLs_n(String ls_n) {
		this.ls_n = ls_n;
	}
	private String gg_code;
	public String getGg_code() {
		return gg_code;
	}
	public void setGg_code(String gg_code) {
		this.gg_code = gg_code;
	}
	private String sy_code;
	public String getSy_code() {
		return sy_code;
	}
	public void setSy_code(String sy_code) {
		this.sy_code = sy_code;
	}
	private String ewm;
	public String getEwm() {
		return ewm;
	}
	public void setEwm(String ewm) {
		this.ewm = ewm;
	}
	private String bu_id;
	public String getBu_id() {
		return bu_id;
	}
	public void setBu_id(String bu_id) {
		this.bu_id = bu_id;
	}
	private String wt_dt;
	public String getWt_dt() {
		return wt_dt;
	}
	public void setWt_dt(String wt_dt) {
		this.wt_dt = wt_dt;
	}
	private String submit;
	public String getSubmit() {
		return submit;
	}
	public void setSubmit(String submit) {
		this.submit = submit;
	}
	private String sjwc_dt;
	public String getSjwc_dt() {
		return sjwc_dt;
	}
	public void setSjwc_dt(String sjwc_dt) {
		this.sjwc_dt = sjwc_dt;
	}
	private String ff_dt;
	public String getFf_dt() {
		return ff_dt;
	}
	public void setFf_dt(String ff_dt) {
		this.ff_dt = ff_dt;
	}
	private String fq_flg;
	public String getFq_flg() {
		return fq_flg;
	}
	public void setFq_flg(String fq_flg) {
		this.fq_flg = fq_flg;
	}
	private String spyj_t;
	public String getSpyj_t() {
		return spyj_t;
	}
	public void setSpyj_t(String spyj_t) {
		this.spyj_t = spyj_t;
	}
	private String copy_id;
	public String getCopy_id() {
		return copy_id;
	}
	public void setCopy_id(String copy_id) {
		this.copy_id = copy_id;
	}
	public String add() throws Exception {
		response.setCharacterEncoding("UTF-8"); 
		response.setContentType("text/html;charset=UTF-8"); 
		Entrust entrust =new Entrust(); 
		if(id!=null&&!id.equals(""))
		entrust.setId(Long.parseLong(id));
		entrust.setRow_id(row_id);
		if(c_dt!=null&&!c_dt.equals(""))
		entrust.setC_dt(sdf.parse(c_dt));
		if(up_dt!=null&&!up_dt.equals(""))
		entrust.setUp_dt(sdf.parse(up_dt));
		entrust.setC_id(c_id);
		entrust.setCode(code);
		entrust.setProd_id(prod_id);
		entrust.setTy_lv(ty_lv);
		entrust.setQy_lv(qy_lv);
		entrust.setJl_id(jl_id);
		entrust.setSp_id(sp_id);
		entrust.setLq_id(lq_id);
		entrust.setSt_lv(st_lv);
		entrust.setPay_lv(pay_lv);
		entrust.setPrice(price);
		if(cs_n!=null&&!cs_n.equals(""))
		entrust.setCs_n(Long.parseLong(cs_n));
		entrust.setSyr_id(syr_id);
		entrust.setJh_dt(jh_dt);
		entrust.setCg_f(cg_f);
		entrust.setCm_tx(cm_tx);
		entrust.setFlg(flg);
		entrust.setPid(pid);
		entrust.setLs_n(ls_n);
		entrust.setGg_code(gg_code);
		entrust.setSy_code(sy_code);
		entrust.setEwm(ewm);
		entrust.setBu_id(bu_id);
		entrust.setWt_dt(wt_dt);
		entrust.setSubmit(submit);
		entrust.setSjwc_dt(sjwc_dt);
		entrust.setFf_dt(ff_dt);
		entrust.setFq_flg(fq_flg);
		entrust.setSpyj_t(spyj_t);
		if(copy_id!=null&&!copy_id.equals(""))
		entrust.setCopy_id(Long.parseLong(copy_id));
		StringBuffer msg = new StringBuffer("{\"state\":");
		try {
			int result = Integer.parseInt(iEntrustService.addentrust(entrust).toString());
			if(result>0){
				String qrResult = MatrixToImageWriter.createQrImage("TG_"+entrust.getId());
				if(qrResult.length()>0){
					HttpServletRequest request = ServletActionContext.getRequest();
					String path = request.getScheme() + "://"
							+ request.getServerName() + ":" + request.getServerPort()
							+ request.getContextPath();
					Entrust upentrust = new Entrust();
					upentrust.setId(entrust.getId());
					upentrust.setEwm(path+"/QRImages/"+qrResult);
					iEntrustService.updateentrust(upentrust);
				}
			}
			msg.append("\"success\",\"msg\":\"");
			msg.append(entrust.getId()+"\"");
			logger.info(result+"添加成功！");
		} catch (Exception e) {
			msg.append("\"failure\",\"msg\":");
			msg.append("\"添加失败！\"");
			logger.info("添加失败！。");
			e.printStackTrace();
		}
		msg.append("}");
		if(callback==null){
			response.getWriter().write(msg.toString());
		}
		else{
			response.getWriter().write(callback+"("+msg.toString()+")");
		}
		return null;
	}
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public String list() throws Exception {

		response.setContentType("text/html;charset=UTF-8"); 
		Map  paramMap = new HashMap ();
		paramMap.put("fromPage",(page-1)*size);
		paramMap.put("toPage",page*size); 
			paramMap.put("id", id);
			paramMap.put("row_id", row_id);
			if(c_dtFrom!=null&&!c_dtFrom.equals(""))
			paramMap.put("c_dtFrom", sdf.parse(c_dtFrom));
			if(c_dtTo!=null&&!c_dtTo.equals(""))
			paramMap.put("c_dtTo", sdf.parse(c_dtTo));
			if(up_dtFrom!=null&&!up_dtFrom.equals(""))
			paramMap.put("up_dtFrom", sdf.parse(up_dtFrom));
			if(up_dtTo!=null&&!up_dtTo.equals(""))
			paramMap.put("up_dtTo", sdf.parse(up_dtTo));
			paramMap.put("c_id", c_id);
			paramMap.put("code", code);
			paramMap.put("prod_id", prod_id);
			paramMap.put("ty_lv", ty_lv);
			paramMap.put("qy_lv", qy_lv);
			paramMap.put("jl_id", jl_id);
			paramMap.put("sp_id", sp_id);
			paramMap.put("lq_id", lq_id);
			paramMap.put("st_lv", st_lv);
			paramMap.put("pay_lv", pay_lv);
			paramMap.put("price", price);
			paramMap.put("cs_n", cs_n);
			paramMap.put("syr_id", syr_id);
			paramMap.put("jh_dt", jh_dt);
			paramMap.put("cg_f", cg_f);
			paramMap.put("cm_tx", cm_tx);
			paramMap.put("flg", flg);
			paramMap.put("pid", pid);
			paramMap.put("ls_n", ls_n);
			paramMap.put("gg_code", gg_code);
			paramMap.put("sy_code", sy_code);
			paramMap.put("ewm", ewm);
			paramMap.put("bu_id", bu_id);
			paramMap.put("wt_dt", wt_dt);
			paramMap.put("submit", submit);
			paramMap.put("sjwc_dt", sjwc_dt);
			paramMap.put("ff_dt", ff_dt);
			paramMap.put("fq_flg", fq_flg);
			paramMap.put("spyj_t", spyj_t);
			paramMap.put("copy_id", copy_id);
		StringBuffer msg = new StringBuffer("{\"state\":");
		try {
			list=iEntrustService.selectentrustByParam(paramMap); 
			totalnumber=iEntrustService.selectCountentrustByParam(paramMap);
			JsonConfig jsonConfig = new JsonConfig();
			jsonConfig.registerJsonValueProcessor(Date.class, new JsonValueProcessor() {
				public Object processArrayValue(Object value, JsonConfig jsonConfig) {
					return value;  
				} 
			public Object processObjectValue(String key, Object value, JsonConfig jsonConfig) { 
				if(value instanceof Date){ 
					return sdf.format((Date)value);
				}
				return value; 
			}
			});
			msg.append("\"success\",\"count\":\""+totalnumber+"\",\"msg\":");
			msg.append(JSONArray.fromObject(list, jsonConfig));
			logger.info("获取列表成功！");
		} catch (Exception e) {
			msg.append("\"failure\",\"msg\":");
			msg.append("\"查询失败.\"");
			logger.info("获取列表失败！"+e);
			e.printStackTrace();
		}
		msg.append("}");
		if(callback==null){
			response.getWriter().write(msg.toString());
		}
		else{
			response.getWriter().write(callback+"("+msg.toString()+")");
		}
		return null;
	}

	public String update() throws Exception {
		response.setCharacterEncoding("UTF-8"); 
		response.setContentType("text/html;charset=UTF-8"); 
		Entrust entrust =new Entrust(); 
		if(id!=null&&!id.equals(""))
		entrust.setId(Long.parseLong(id));
		entrust.setRow_id(row_id);
		if(c_dt!=null&&!c_dt.equals(""))
		entrust.setC_dt(sdf.parse(c_dt));
		if(up_dt!=null&&!up_dt.equals(""))
		entrust.setUp_dt(sdf.parse(up_dt));
		entrust.setC_id(c_id);
		entrust.setCode(code);
		entrust.setProd_id(prod_id);
		entrust.setTy_lv(ty_lv);
		entrust.setQy_lv(qy_lv);
		entrust.setJl_id(jl_id);
		entrust.setSp_id(sp_id);
		entrust.setLq_id(lq_id);
		entrust.setSt_lv(st_lv);
		entrust.setPay_lv(pay_lv);
		entrust.setPrice(price);
		if(cs_n!=null&&!cs_n.equals(""))
		entrust.setCs_n(Long.parseLong(cs_n));
		entrust.setSyr_id(syr_id);
		entrust.setJh_dt(jh_dt);
		entrust.setCg_f(cg_f);
		entrust.setCm_tx(cm_tx);
		entrust.setFlg(flg);
		entrust.setPid(pid);
		entrust.setLs_n(ls_n);
		entrust.setGg_code(gg_code);
		entrust.setSy_code(sy_code);
		entrust.setEwm(ewm);
		entrust.setBu_id(bu_id);
		entrust.setWt_dt(wt_dt);
		entrust.setSubmit(submit);
		entrust.setSjwc_dt(sjwc_dt);
		entrust.setFf_dt(ff_dt);
		entrust.setFq_flg(fq_flg);
		entrust.setSpyj_t(spyj_t);
		if(copy_id!=null&&!copy_id.equals(""))
		entrust.setCopy_id(Long.parseLong(copy_id));
		StringBuffer msg = new StringBuffer("{\"state\":");
		try {
			iEntrustService.updateentrust(entrust);
			msg.append("\"success\",\"msg\":");
			msg.append("\"更新成功！\"");
			logger.info(id+"更新成功！");
		} catch (Exception e) {
			logger.info(id+"更新失败！"+e);
			msg.append("\"failure\",\"msg\":");
			msg.append("\"更新失败！\"");
			e.printStackTrace();
		}
		msg.append("}");
		if(callback==null){
			response.getWriter().write(msg.toString());
		}
		else{
			response.getWriter().write(callback+"("+msg.toString()+")");
		}
		return null;
	}
	public String delete() throws Exception {
		response.setCharacterEncoding("UTF-8"); 
		response.setContentType("text/html;charset=UTF-8"); 
		StringBuffer msg = new StringBuffer("{\"state\":");
		try {
			iEntrustService.deleteentrust(id);
			msg.append("\"success\",\"msg\":");
			msg.append("\"删除成功！\"");
			logger.info(id+"删除成功！");
		} catch (Exception e) {
			logger.info(id+"删除失败！"+e);
			msg.append("\"failure\",\"msg\":");
			msg.append("\"更新失败！\"");
			e.printStackTrace();
		}
		msg.append("}");
		if(callback==null){
			response.getWriter().write(msg.toString());
		}
		else{
			response.getWriter().write(callback+"("+msg.toString()+")");
		}
		return null;
	}
	public String select() throws Exception {
		response.setContentType("text/html;charset=UTF-8"); 
		StringBuffer msg = new StringBuffer("{\"state\":");
		try {
			entrust=iEntrustService.selectentrustById(id);
			JsonConfig jsonConfig = new JsonConfig();
			jsonConfig.registerJsonValueProcessor(Date.class, new JsonValueProcessor() {
				public Object processArrayValue(Object value, JsonConfig jsonConfig) {
					return value;  
				} 
			public Object processObjectValue(String key, Object value, JsonConfig jsonConfig) { 
				if(value instanceof Date){ 
					return sdf.format((Date)value);
				}
				return value; 
			}
			});
			msg.append("\"success\",\"msg\":");
			msg.append(JSONObject.fromObject(entrust, jsonConfig));
			logger.info(id+"查询成功！");
		} catch (Exception e) {
			logger.info(id+"查询失败！"+e);
			msg.append("\"failure\",\"msg\":");
			msg.append("\"查询失败.\"");
			e.printStackTrace();
		}
		msg.append("}");
		if(callback==null){
			response.getWriter().write(msg.toString());
		}
		else{
			response.getWriter().write(callback+"("+msg.toString()+")");
		}
		return null;
	}
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public String all() throws Exception {

		response.setContentType("text/html;charset=UTF-8"); 
		Map  paramMap = new HashMap ();
			paramMap.put("id", id);
			paramMap.put("row_id", row_id);
			if(c_dtFrom!=null&&!c_dtFrom.equals(""))
			paramMap.put("c_dtFrom", sdf.parse(c_dtFrom));
			if(c_dtTo!=null&&!c_dtTo.equals(""))
			paramMap.put("c_dtTo", sdf.parse(c_dtTo));
			if(up_dtFrom!=null&&!up_dtFrom.equals(""))
			paramMap.put("up_dtFrom", sdf.parse(up_dtFrom));
			if(up_dtTo!=null&&!up_dtTo.equals(""))
			paramMap.put("up_dtTo", sdf.parse(up_dtTo));
			paramMap.put("c_id", c_id);
			paramMap.put("code", code);
			paramMap.put("prod_id", prod_id);
			paramMap.put("ty_lv", ty_lv);
			paramMap.put("qy_lv", qy_lv);
			paramMap.put("jl_id", jl_id);
			paramMap.put("sp_id", sp_id);
			paramMap.put("lq_id", lq_id);
			paramMap.put("st_lv", st_lv);
			paramMap.put("pay_lv", pay_lv);
			paramMap.put("price", price);
			paramMap.put("cs_n", cs_n);
			paramMap.put("syr_id", syr_id);
			paramMap.put("jh_dt", jh_dt);
			paramMap.put("cg_f", cg_f);
			paramMap.put("cm_tx", cm_tx);
			paramMap.put("flg", flg);
			paramMap.put("pid", pid);
			paramMap.put("ls_n", ls_n);
			paramMap.put("gg_code", gg_code);
			paramMap.put("sy_code", sy_code);
			paramMap.put("ewm", ewm);
			paramMap.put("bu_id", bu_id);
			paramMap.put("wt_dt", wt_dt);
			paramMap.put("submit", submit);
			paramMap.put("sjwc_dt", sjwc_dt);
			paramMap.put("ff_dt", ff_dt);
			paramMap.put("fq_flg", fq_flg);
			paramMap.put("spyj_t", spyj_t);
			paramMap.put("copy_id", copy_id);
		StringBuffer msg = new StringBuffer("{\"state\":");
		try {
			totalnumber=iEntrustService.selectCountentrustByParam(paramMap);
			paramMap.put("fromPage",0);
			paramMap.put("toPage",totalnumber);
			list=iEntrustService.selectentrustByParam(paramMap); 
			JsonConfig jsonConfig = new JsonConfig();
			jsonConfig.registerJsonValueProcessor(Date.class, new JsonValueProcessor() {
				public Object processArrayValue(Object value, JsonConfig jsonConfig) {
					return value;  
				} 
			public Object processObjectValue(String key, Object value, JsonConfig jsonConfig) { 
				if(value instanceof Date){ 
					return sdf.format((Date)value);
				}
				return value; 
			}
			});
			msg.append("\"success\",\"count\":\""+totalnumber+"\",\"msg\":");
			msg.append(JSONArray.fromObject(list, jsonConfig));
			logger.info("获取列表成功！");
		} catch (Exception e) {
			msg.append("\"failure\",\"msg\":");
			msg.append("\"查询失败.\"");
			logger.info("获取列表失败！"+e);
			e.printStackTrace();
		}
		msg.append("}");
		if(callback==null){
			response.getWriter().write(msg.toString());
		}
		else{
			response.getWriter().write(callback+"("+msg.toString()+")");
		}
		return null;
	}

    public String execute() throws Exception {
		return null;
	}
}
